//选择-置换算法：用于生成初始归并段，使用败者树进行比较。
//算法思想：由于初始归并段必须有序，而用于比较元素大小的内存空间R有限，为了确保当前生成的归并段尽可能长，应该使R中所有元素都无法加入
//         当前归并段才开始生成下一归并段。具体做法需要记录当前归并段的最大值LastKey，即门槛。大于门槛的值才能被加入当前归并段，
//         从而使归并段有序。当R中所有元素都小于门槛，说明R中当前元素都无法加入当前归并段，当前归并段生成结束，开始生成下一个归并段。
//         重复以上做法使所有元素被划分到不同归并段中。
//         假设内存空间R能容纳元素为k，生成初始归并段的步骤为：
//            1、读入k个元素，构造败者树
//            2、在败者树中找到最小元素R[q]，作为LastKey，并输出，即加入当前归并段
//            3、读入下一个元素，置换R[q]，调整败者树。在比LastKey大的元素中，选一个元素作为新LastKey，并加入当前归并段。
//               若败者树所有元素都小于LastKey，当前归并段生成结束，开始生成下一归并段
//            4、重新开始选择置换，直到所有元素都被划分到归并段中